function createInterceptorManager() {
  const handlers = []
  return {
    handlers,
    use(onFulfilled, onRejected) {
      handlers.push({ onFulfilled, onRejected })
      return handlers.length - 1
    },
  }
}

async function runRequestInterceptors(manager, config) {
  let current = config
  for (const handler of manager.handlers) {
    if (!handler || typeof handler.onFulfilled !== 'function') continue
    const result = await handler.onFulfilled(current)
    if (result !== undefined) {
      current = result
    }
  }
  return current
}

async function runResponseInterceptors(manager, response) {
  let current = response
  for (const handler of manager.handlers) {
    if (!handler || typeof handler.onFulfilled !== 'function') continue
    const result = await handler.onFulfilled(current)
    if (result !== undefined) {
      current = result
    }
  }
  return current
}

async function runResponseErrorInterceptors(manager, error) {
  let current = error
  for (const handler of manager.handlers) {
    if (!handler || typeof handler.onRejected !== 'function') continue
    try {
      const result = await handler.onRejected(current)
      if (result !== undefined) {
        current = result
      }
    } catch (err) {
      current = err
    }
  }
  throw current
}

function create(defaultConfig = {}) {
  const requestManager = createInterceptorManager()
  const responseManager = createInterceptorManager()

  const instance = function axiosInstance(config) {
    return instance.request(config)
  }

  const baseDefaults = {
    adapter: async (config) => ({ data: null, status: 200, statusText: 'OK', headers: {}, config }),
    headers: {},
  }

  instance.defaults = { ...baseDefaults, ...defaultConfig }
  if (!instance.defaults.headers) instance.defaults.headers = {}

  instance.interceptors = {
    request: requestManager,
    response: responseManager,
  }

  instance.request = async function request(config = {}) {
    const merged = {
      ...config,
      headers: { ...(instance.defaults.headers || {}), ...(config.headers || {}) },
    }
    let finalConfig = await runRequestInterceptors(requestManager, merged)
    if (!finalConfig || typeof finalConfig !== 'object') {
      finalConfig = merged
    }
    const adapter = finalConfig.adapter || instance.defaults.adapter
    if (typeof adapter !== 'function') {
      throw new Error('Axios stub: missing adapter')
    }
    try {
      let response = await adapter(finalConfig)
      if (!response || typeof response !== 'object') {
        response = { data: response, status: 200, statusText: 'OK', headers: {}, config: finalConfig }
      }
      if (!response.config) response.config = finalConfig
      response = await runResponseInterceptors(responseManager, response)
      return response
    } catch (error) {
      return runResponseErrorInterceptors(responseManager, error)
    }
  }

  const methodsWithBody = ['post', 'put', 'patch']
  const methodsWithoutBody = ['get', 'delete', 'head', 'options']

  methodsWithBody.forEach((method) => {
    instance[method] = (url, data, config = {}) =>
      instance.request({ ...config, method, url, data })
  })

  methodsWithoutBody.forEach((method) => {
    instance[method] = (url, config = {}) => instance.request({ ...config, method, url })
  })

  return instance
}

const axios = create()
axios.create = (config) => create(config)
axios.isAxiosError = () => false

export default axios
export { create }
