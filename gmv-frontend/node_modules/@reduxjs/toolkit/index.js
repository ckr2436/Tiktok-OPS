function clone(value) {
  if (typeof structuredClone === 'function') {
    return structuredClone(value)
  }
  return JSON.parse(JSON.stringify(value))
}

function createSlice({ name = 'slice', initialState = {}, reducers = {} } = {}) {
  const actions = {}
  const caseReducers = {}
  Object.entries(reducers).forEach(([key, reducer]) => {
    const type = `${name}/${key}`
    actions[key] = (payload) => ({ type, payload })
    caseReducers[type] = reducer
  })

  const sliceReducer = (state = clone(initialState), action = {}) => {
    const handler = caseReducers[action.type]
    if (!handler) return state
    const draft = clone(state)
    const result = handler(draft, action) ?? draft
    return result
  }

  return { actions, reducer: sliceReducer }
}

function configureStore({ reducer, preloadedState = {} } = {}) {
  const rootReducer = typeof reducer === 'function' ? reducer : (state = {}, action) => {
    const nextState = { ...state }
    Object.entries(reducer || {}).forEach(([key, sliceReducer]) => {
      const prev = state[key]
      nextState[key] = sliceReducer(prev, action)
    })
    return nextState
  }

  let currentState = rootReducer(preloadedState, { type: '@@INIT' })
  const listeners = new Set()

  const store = {
    dispatch(action) {
      currentState = rootReducer(currentState, action)
      listeners.forEach((listener) => listener())
      return action
    },
    getState() {
      return currentState
    },
    subscribe(listener) {
      listeners.add(listener)
      return () => listeners.delete(listener)
    },
  }

  return store
}

export { createSlice, configureStore }
export default { createSlice, configureStore }
