function noop() {}

function createElement(type, props, ...children) {
  return { type, props: { ...(props || {}), children } }
}

function identity(value) {
  return value
}

function useState(initial) {
  let value = typeof initial === 'function' ? initial() : initial
  const setValue = (next) => {
    value = typeof next === 'function' ? next(value) : next
    return value
  }
  return [value, setValue]
}

function useMemo(factory) {
  return typeof factory === 'function' ? factory() : factory
}

function useCallback(fn) {
  return typeof fn === 'function' ? fn : () => fn
}

function useEffect() {}
function useLayoutEffect() {}
function useRef(initial = null) {
  return { current: initial }
}
function useReducer(reducer, initialArg, init) {
  let state = typeof init === 'function' ? init(initialArg) : initialArg
  const dispatch = (action) => {
    state = reducer(state, action)
    return action
  }
  return [state, dispatch]
}
function useContext(value) {
  return value
}

const Fragment = Symbol.for('react.fragment')

const React = {
  createElement,
  Fragment,
  useState,
  useMemo,
  useCallback,
  useEffect,
  useLayoutEffect,
  useRef,
  useReducer,
  useContext,
}

export default React
export {
  createElement,
  Fragment,
  useState,
  useMemo,
  useCallback,
  useEffect,
  useLayoutEffect,
  useRef,
  useReducer,
  useContext,
  identity,
  noop,
}
