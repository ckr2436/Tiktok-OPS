{
  "title": "Upload a video",
  "endpoint": "https://business-api.tiktok.com/open_api/v1.3/file/video/ad/upload/",
  "method": "POST",
  "category_path": [
    "Video"
  ],
  "official_only": true,
  "request": {
    "headers": [
      {
        "name": "Access-Token",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Authorized access token. For details, see Authentication ."
      },
      {
        "name": "Content-Type",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Request message type. If upload_type is UPLOAD_BY_FILE , use multipart/form-data . If upload_type is UPLOAD_BY_URL or UPLOAD_BY_FILE_ID , use application/json ."
      }
    ],
    "parameters": [
      {
        "name": "advertiser_id",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Advertiser ID."
      },
      {
        "name": "file_name",
        "required": false,
        "type": "string",
        "raw_type": "string",
        "description": "Video name. Length limit: 1 - 100 characters. Default value: When Smart Fix is not enabled ( flaw_detect and auto_fix_enabled are set to false ): If you upload a local file, the default name will be the original file name. If you provide a URL, the default name will be the filename portion of the URL path. If the original file name or the filename portion of the URL path exceeds 100 characters, it will be truncated to use only the first 100 characters. When Smart Fix is enabled ( flaw_detect and auto_fix_enabled are set to true ): The default name will be either the original file name (for a local file) or the filename portion of the URL path (for a URL). If you specify a custom video name via file_name , the file_name value will be the name of the fixed video. Note : Videos under the same advertiser_id cannot have duplicated file names. You can call /file/name/check/ to check whether the file name has been used. If you get an error about duplicated file names, please rename the files or append timestamps to the original file names (for example, in the format of _ , and upload the videos again."
      },
      {
        "name": "upload_type",
        "required": false,
        "type": "string",
        "raw_type": "string",
        "description": "Video upload method. Default value: UPLOAD_BY_FILE Enum values: UPLOAD_BY_FILE , UPLOAD_BY_URL , UPLOAD_BY_FILE_ID , UPLOAD_BY_VIDEO_ID . Note : If you set this field to UPLOAD_BY_FILE , UPLOAD_BY_URL or UPLOAD_BY_FILE_ID , a new video ID ( video_id ) will be returned. If you upload the same video multiple times using any of these three methods, you'll obtain a new video ID for each upload."
      },
      {
        "name": "video_file Conditional",
        "required": true,
        "type": "string",
        "raw_type": "file",
        "description": "Required when upload_type is UPLOAD_BY_FILE . Video file. Recommended settings： (1) File size：500 MB limit (2) ratio：9:16, 16:9, and 1:1. (3) Format：.mp4, .mov, .mpeg, .avi. Example: 'video_file=@\"/Users/admin/Downloads/sample-mov-file.mov\"' Note : Before uploading, make sure that the file is playable and in a supported format ."
      },
      {
        "name": "video_signature Conditional",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Required when upload_type is UPLOAD_BY_FILE . Video MD5 (used for server verification)."
      },
      {
        "name": "video_url Conditional",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Required when upload_type is UPLOAD_BY_URL . Video URL address, such as http://xxx.xxx. (1) File size: better within 10MB. (2) Verification: We will verify Content-Type in the response header. A common invalid media type is text ( Content-Type = text/*, such as text/html, text/plain). Also, we will verify the data if you set a Content-MD5 in the response header. (3) Encoding: The URL needs to be a valid URL in the browser. For instance, the spaces in the URL need to be encoded into %20 . You can copy and paste the URL into a browser address bar, then the URL will be automatically encoded. (4) Others: ratio, format, resolution and bitrate limitation is the same as video_file . Note : Before uploading, make sure that the video URL is playable and in a supported format . If the URL is invalid or in an unsupported format (i.e. txt.), you may see an error message or obtain an invalid video ID that cannot be used for ad creation."
      },
      {
        "name": "file_id Conditional",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Required when upload_type is UPLOAD_BY_FILE_ID . The file_id of the file that you want to upload. This field is for files that are uploaded to the file repository. You can get file_id via the Upload Files endpoints."
      },
      {
        "name": "video_id Conditional",
        "required": true,
        "type": "string",
        "raw_type": "string",
        "description": "Required when upload_type is UPLOAD_BY_VIDEO_ID . Video ID. Note : You should pass in the video_id of the videos created on TikTok Ads Manager or through API . If you pass in the value from other sources, you may see an error message or cannot use the uploaded video for ad creation. You can obtain video_id in the response of the /file/video/ad/upload/ endpoint or by using the /file/video/ad/search/ endpoint."
      },
      {
        "name": "is_third_party",
        "required": false,
        "type": "boolean",
        "raw_type": "boolean",
        "description": "The video is third party or not."
      },
      {
        "name": "flaw_detect",
        "required": false,
        "type": "boolean",
        "raw_type": "boolean",
        "description": "Whether to automatically detect an issue in your video. Default value: false ."
      },
      {
        "name": "auto_fix_enabled",
        "required": false,
        "type": "boolean",
        "raw_type": "boolean",
        "description": "Whether to automatically fix the detected issue. Default value : false . If an issue is detected in your video: When auto_fix_enabled is set to false , we'll return an error message with flaw types indicated. When auto_fix_enabled is set to true , we'll automatically fix the LOW_RESOLUTION and ILLEGAL_VIDEO_SIZE issues and return fix_task_id and flaw_types . Note : When a LOW_RESOLUTION issue is detected, the video is automatically enhanced to a standard resolution of 1280x720 pixels, also referred to as 720p. When an ILLEGAL_VIDEO_SIZE issue is detected, the video is automatically adjusted to one of the standard aspect ratios: 1:1 (square), 9:16 (vertical), or 16:9 (horizontal)."
      },
      {
        "name": "auto_bind_enabled",
        "required": false,
        "type": "boolean",
        "raw_type": "boolean",
        "description": "Valid only when flaw_detect = true and auto_fix_enabled = true . Whether to automatically upload the fixed video to your creative library. Default value : false ."
      }
    ],
    "examples": [
      {
        "title": "Upload by file with Smart Fix enabled",
        "curl": "curl --location --request POST 'https://business-api.tiktok.com/open_api/v1.3/file/video/ad/upload/' \\\n--header 'Access-Token: {{Access-Token}}' \\\n--form 'advertiser_id=\"{{advertiser_id}}\"' \\\n--form 'file_name=\"{{file_name}}\"' \\\n--form 'upload_type=\"UPLOAD_BY_FILE\"' \\\n--form 'video_file=@\"/Desktop/Example.mp4\"' \\\n--form 'video_signature=\"{{video_signature}}\"' \\\n--form 'flaw_detect=\"true\"' \\\n--form 'auto_fix_enabled=\"true\"' \\\n--form 'auto_bind_enabled=\"true\"'"
      },
      {
        "title": "Upload by file with Smart Fix disabled",
        "curl": "curl --location --request POST 'https://business-api.tiktok.com/open_api/v1.3/file/video/ad/upload/' \\\n--header 'Access-Token: {{Access-Token}}' \\\n--form 'advertiser_id=\"{{advertiser_id}}\"' \\\n--form 'file_name=\"{{file_name}}\"' \\\n--form 'upload_type=\"UPLOAD_BY_FILE\"' \\\n--form 'video_file=@\"/Desktop/Example.mp4\"' \\\n--form 'video_signature=\"{{video_signature}}\"'"
      },
      {
        "title": "Upload by URL with Smart Fix enabled",
        "curl": "curl --location  --request POST 'https://business-api.tiktok.com/open_api/v1.3/file/video/ad/upload/' \\\n--header 'Access-Token: {{Access-Token}}' \\\n--data '{\n    \"advertiser_id\":\"{{advertiser_id}}\",\n    \"file_name\":\"{{file_name}}\",\n    \"upload_type\":\"UPLOAD_BY_URL\",\n    \"video_url\":\"{{video_url}}\",\n    \"flaw_detect\":true,\n    \"auto_fix_enabled\":true,\n    \"auto_bind_enabled\":true\n}'"
      }
    ]
  },
  "response": {
    "example": {
      "status_line": "HTTPS/1.1 200 OK",
      "body": "{\n    \"code\": 0,\n    \"message\": \"OK\",\n    \"request_id\": \"{{request_id}}\",\n    \"data\": [\n        {\n            \"fix_task_id\": \"{{fix_task_id}}\",\n            \"flaw_types\": [\n                \"LOW_RESOLUTION\"\n            ]\n        }\n    ]\n}"
    }
  }
}